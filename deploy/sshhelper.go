package deploy

import (
	"time"

	"github.com/appleboy/easyssh-proxy"

	"github.com/SebastienDorgan/gpac/clients"
)

//SSHHelper helper to manage ssh session
type SSHHelper struct {
	ssh *easyssh.MakeConfig
}

//FromServerAccess construct a SSHHelper from a clients.ServerAccess
func FromServerAccess(access *clients.ServerAccess, timeout time.Duration) (*SSHHelper, error) {
	cfg := easyssh.MakeConfig{
		Server:  access.GetAccessIP(),
		User:    access.User,
		Key:     access.Key.PrivateKey,
		Timeout: timeout,
	}
	if access.Gateway != nil {

		cfg.Proxy = easyssh.DefaultConfig{
			Server:  access.Gateway.GetAccessIP(),
			User:    access.Gateway.User,
			Key:     access.Gateway.Key.PrivateKey,
			Timeout: timeout,
		}
	}
	return &SSHHelper{
		ssh: &cfg,
	}, nil

}

// Stream run command on the remote host
//Returns:
// - cout sends command stdout line by line
// - cerr sends command stderr line by line
// - done sends true when command is complete
// - cmdErr sends the error generated by command (nil if no error)
// - err connection error (nil if no err)
//The ssh sessions and channels will be closed when command is done.
func (helper *SSHHelper) Stream(command string, timeout time.Duration) (cout, cerr <-chan string, done <-chan bool, cmdErr <-chan error, connErr error) {
	to := int(timeout)
	return helper.ssh.Stream(command, to)
}

// Run run command on the remote host
//Returns:
// - outStr collected command output stream
// - errStr collected command error stream
// - sends true when command is complete
// - cmdErr sends the error generated by command (nil if no error)
// - err connection error (nil if no err)
//The ssh sessions and channels will be closed when command is done.
func (helper *SSHHelper) Run(command string, timeout time.Duration) (outStr string, errStr string, isTimeout bool, err error) {
	to := int(timeout)
	return helper.ssh.Run(command, to)
}
